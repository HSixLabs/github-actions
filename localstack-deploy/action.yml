name: 'LocalStack Deploy'
description: 'Deploy resources to LocalStack for CI/CD testing'

inputs:
  go_version:
    description: 'Go version to use (if needed)'
    required: false
    default: 'stable'
  version:
    description: 'Version to deploy'
    required: true
  stack_name:
    description: 'Pulumi stack name to deploy (e.g., org/project/env)'
    required: true
  work_dir:
    description: 'Directory containing the Pulumi project'
    required: false
    default: 'infrastructure'
  setup_command:
    description: 'Command to run for environment setup (optional)'
    required: false
    default: ''
  version_command:
    description: 'Command to run for setting the version (optional)'
    required: false
    default: ''
  build_command:
    description: 'Command to run for building resources (optional)'
    required: false
    default: ''
  pulumi_token:
    description: 'Pulumi access token'
    required: true
  aws_default_region:
    description: 'AWS region to use'
    required: false
    default: 'us-east-1'
  localstack_endpoint:
    description: 'LocalStack endpoint URL'
    required: false
    default: 'http://localhost:4566'
  localstack_image_tag:
    description: 'LocalStack Docker image tag to use'
    required: false
    default: 'latest'
  localstack_debug:
    description: 'Enable LocalStack debug mode'
    required: false
    default: 'true'

outputs:
  pulumi_output:
    description: "Output from the Pulumi deployment"
    value: ${{ steps.deployment.outputs.output }}

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
        check-latest: true
          
    - name: Write version file
      shell: bash
      run: |
        echo "${{ inputs.version }}" > version.txt

    - name: Run setup command
      if: inputs.setup_command != ''
      shell: bash
      run: |
        ${{ inputs.setup_command }}

    - name: Run version command
      if: inputs.version_command != ''
      shell: bash
      run: |
        ${{ inputs.version_command }}

    - name: Run build command
      if: inputs.build_command != ''
      shell: bash
      run: |
        ${{ inputs.build_command }}

    - name: Set up LocalStack
      uses: LocalStack/setup-localstack@v0.2.3
      with:
        image-tag: ${{ inputs.localstack_image_tag }}
        install-awslocal: true
        configuration: |
          DEBUG=${{ inputs.localstack_debug }}
          SERVICES=s3,sqs,sns,lambda,iam,cloudwatch,logs
          DOCKER_HOST=unix:///var/run/docker.sock
          LAMBDA_EXECUTOR=local
          DATA_DIR=/tmp/localstack/data
          LS_LOG=debug
          LS_LOG_LEVEL=debug

    - name: Verify LocalStack is running
      shell: bash
      run: |
        echo "Waiting for LocalStack to be ready..."
        timeout=30
        elapsed=0
        while true; do
          response=$(curl -s -H "Content-Type: application/json" ${{ inputs.localstack_endpoint }}/_localstack/health)
          echo "Health check response: $response"
          
          if echo "$response" | grep -q '"running": true'; then
            echo "LocalStack is running"
            break
          fi
          
          if [ $elapsed -ge $timeout ]; then
            echo "Error: LocalStack failed to start within $timeout seconds"
            echo "Last health check response: $response"
            exit 1
          fi
          
          echo "Waiting for LocalStack to be ready... ($elapsed seconds elapsed)"
          sleep 1
          elapsed=$((elapsed+1))
        done
        echo "LocalStack is ready"
        curl -s -H "Content-Type: application/json" ${{ inputs.localstack_endpoint }}/_localstack/health

    - name: Deploy Resources
      id: deployment
      uses: pulumi/actions@v6
      with:
        command: up
        stack-name: ${{ inputs.stack_name }}
        work-dir: ${{ inputs.work_dir }}
        refresh: true
      env:
        PULUMI_ACCESS_TOKEN: ${{ inputs.pulumi_token }}
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
        LOCALSTACK_ENDPOINT: ${{ inputs.localstack_endpoint }}
        AWS_USE_PATH_STYLE: true
        AWS_SKIP_CREDENTIALS_VALIDATION: true
        AWS_SKIP_REQUESTING_ACCOUNT_ID: true
        AWS_SKIP_REGION_VALIDATION: true 