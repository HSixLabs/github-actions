name: 'LocalStack Cleanup'
description: 'Clean up resources deployed to LocalStack for CI/CD testing'

inputs:
  go_version:
    description: 'Go version to use (if needed)'
    required: false
    default: 'stable'
  version:
    description: 'Version that was deployed'
    required: true
  stack_name:
    description: 'Pulumi stack name to destroy (e.g., org/project/env)'
    required: true
  work_dir:
    description: 'Directory containing the Pulumi project'
    required: false
    default: 'infrastructure'
  setup_command:
    description: 'Command to run for environment setup (optional)'
    required: false
    default: ''
  pulumi_token:
    description: 'Pulumi access token'
    required: true
  aws_default_region:
    description: 'AWS region to use'
    required: false
    default: 'us-east-1'
  localstack_endpoint:
    description: 'LocalStack endpoint URL'
    required: false
    default: 'http://localhost:4566'
  localstack_image_tag:
    description: 'LocalStack Docker image tag to use'
    required: false
    default: 'latest'
  localstack_debug:
    description: 'Enable LocalStack debug mode'
    required: false
    default: 'true'

outputs:
  destroy_success:
    description: "Whether the destroy operation was successful"
    value: ${{ steps.check_outcome.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
        check-latest: true
          
    - name: Write version file
      shell: bash
      run: |
        echo "${{ inputs.version }}" > version.txt

    - name: Run setup command
      if: inputs.setup_command != ''
      shell: bash
      run: |
        ${{ inputs.setup_command }}

    - name: Setup LocalStack
      uses: LocalStack/setup-localstack@v0.2.2
      with:
        image-tag: ${{ inputs.localstack_image_tag }}
        install-awslocal: true
        configuration: |
          DEBUG=${{ inputs.localstack_debug }}
          LAMBDA_EXECUTOR=docker
          DOCKER_HOST_FROM_CONTAINER=host.docker.internal

    - name: Verify LocalStack is running
      shell: bash
      run: |
        echo "Waiting for LocalStack to be ready..."
        timeout=30
        elapsed=0
        while true; do
          response=$(curl -s ${{ inputs.localstack_endpoint }}/_localstack/health)
          echo "Health check response: $response"
          
          # Check for specific required services
          required_services=("apigateway" "dynamodb" "lambda" "s3" "iam" "sqs")
          all_services_available=true
          for service in "${required_services[@]}"; do
            if ! echo "$response" | grep -q "\"$service\": \"available\""; then
              all_services_available=false
              break
            fi
          done
          
          if [ "$all_services_available" = true ]; then
            echo "LocalStack is ready with all required services available"
            break
          fi
          
          if [ $elapsed -ge $timeout ]; then
            echo "Error: LocalStack failed to start within $timeout seconds"
            echo "Last health check response: $response"
            exit 1
          fi
          
          echo "Waiting for LocalStack to be ready... ($elapsed seconds elapsed)"
          sleep 1
          elapsed=$((elapsed+1))
        done
        echo "LocalStack is ready"
        curl -s ${{ inputs.localstack_endpoint }}/_localstack/health

    - name: Destroy Resources
      id: destroy
      uses: pulumi/actions@v6
      continue-on-error: true
      with:
        command: destroy
        stack-name: ${{ inputs.stack_name }}
        work-dir: ${{ inputs.work_dir }}
        refresh: true
        remove: true
      env:
        PULUMI_ACCESS_TOKEN: ${{ inputs.pulumi_token }}
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
        AWS_ENDPOINT_URL: ${{ inputs.localstack_endpoint }}
        AWS_USE_PATH_STYLE: true
        AWS_SKIP_CREDENTIALS_VALIDATION: true
        AWS_SKIP_REQUESTING_ACCOUNT_ID: true
        AWS_SKIP_REGION_VALIDATION: true
        
    - name: Check Outcome
      id: check_outcome
      shell: bash
      run: |
        if [ "${{ steps.destroy.outcome }}" == "success" ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "âœ… Successfully destroyed resources in LocalStack"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "::warning::Failed to destroy resources in LocalStack. This might lead to resource conflicts in future runs."
        fi 